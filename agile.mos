##Peki Agile olmak neleri gerektirir ?

#####Daha önce okuduğum ve bir çok kişininde referans alarak uygulamaya çalıştığı "What Do We Know About Scientific Software Development’s Agile Practices ?" makalesinde belirtilen 35 Agile Best Practice'i baz alarak takım olarak ne yapıp ne yapmıyorsunuz, ne kadar agile'sınız yorumlayabilirsiniz. 

1. Önceliklendirmeler projede en yetkili kişi olan product owner tarafından (ekibin fikrini alarak) yapılmalı,
2. Development sürecindeki sorunlar scrum master tarafından scrum'larda çözüm aranmalı,
3. Spring backlog oluşturmak için Spring planlama toplantıları yapılmalı,
4. Efor verirken Planning Poker oyunu gibi eğlenceli bir seçiminiz olmalı,
5. Kısa ve Orta vadede koşan sprint'leriniz olmalı,
6. Product owner ve ekip arasında sürekli bir communication olmalı,
7. Mevcut konuları konuşmak için kısa daily meeting'ler düzenlenmeli,
8. Self-organization yani kendiliğinden organize olabilen bir ekip uluşturulabilmeli,
9. Grafikler ile sprint süreci gözlemlenmeli,
10. Sprint sonlarında review toplantıları düzenlenmeli,
11. Retrospective yaparak geçmiş sprintle ilgili değerlendirmelerde bulunulmalı,
12. Short & Fast product release'ler çıkılmalı,
13. User storie'ler yazılmalı,
14. Takıma dedike bir şekilde çalışabileceği açık çalışma alanları yaratılmalı,
15. Sürdürülebilir bir çalışma ortamı sunulmalı,
16. Proje ivmesi ölçülebilmeli,
17. Ekipte bulunanlar her konuda fikrini söyleyebilmeli,
18. Müşteriye ihtiyaç duyulduğunda hemen ulaşılabiliyor olmalı,
19. Ekip olarak kod standartları belirlenmeli,
20. İlk önce unit-test'ler yazılmalı,
21. Prod'a alınan kod'un bir pair-programming ürünü olduğu unutulmamalı,
22. Geliştirmeler branch'lere ayrılarak yapılmalı ve test sonuçlarına göre merge işlemi yapılmalı,
23. Sürekli olarak yeni şeyler entegre edilebilecek altyapıya sahip bir altyapı,
24. Repository yönetimini iyi yapıp release günü geldiğinde sorunsuz bir şekilde release çıkılabilmeli,
25. Collective bir biçimde developer'lar atayın bir sorumluluğu tek bir kişiye yüklemekten kaçının,
26. Basit bir tasarıma desenine sahip olmalı,
27. Bir sistem metforu seçilmeli,
28. Design&Development için Class-responsibility-collaboration kartlarını kullanmaya çalışın,
29. Riski azaltmak için çözümler üretilmeli,
30. İhtiyaç duyulmayan hiç bir fonksiyonalite önceden entegre edilmemeli,
31. Ne zaman-Nerde olduğuna bakılmaksızın refactor edilebilmeli,
32. Bütün kod'un unit-test'i yazılmış olmalı,
33. Proje prod'a alınmadan önce bütün unit-test'lerden geçmeli,
34. Yeni bir bug bulunduğunda testler anında oluşturulmalı,
35. Acceptence-test'ler sıklıkla uygulanmalı ve skor yayınlanmalı.
